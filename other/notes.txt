notes 

hashmaps can be enum - numbers are consecutive...

musicstring class doesnt really need hashmaps either - just open string
    we only really need to do subtraction
    is that more efficient?
    
    FINDING FRETS

        1. doing now
            declare and fill hashmap
            iteration
                look through position to position+stretch
                    if hashmap[curr] = noteToFind
                    iterate ...
        2.  better 
            declare and fill hashmap
            hashmap lookuptime
                foundAt = hashmap[notenum]   (right now I iterate through all)
                if it found it AND foundAt >= positionnotnum  AND  notenum <= positionnotnum +stretch 
        3.  maybe even better
            no map decalre or fill, just open
            is notenum between position and position notenum + stretch
                if notenum >= positionnotnum  AND  notenum <= positionnotnum +stretch
    
    RECURSION
        def a constant that the rec calls can access so that I dont need to keep passing the same variables!

        1. dupliacte checking after finding a solution. 
        does it use the first fret of the positon? if not, its shifted up version of somtehing else
        n checks for n strings 

        2. dupliacte check as part of feasible function
        when we use the first fret of a posiiotn, mark it as feasible, when to the end and well already know
        n checks for n recursions of backtrack...

        **add to one of these: at each postion check if first fret of any string even CAN be used for a chordtone BEFORE we backtrack. 
            n*12 checks for n strings, but could save us a ton of backtracking 


bruteforce is better than keeptrack 
preprocessing makes both faster - about the same - cant say which is better.
seems to hold for big and small practical numbers of chord tones and strings

using slice?


FRONT END
bugs - ios screen height is still kind of slow 
lines btwn boxes

FEATURES

results
    no string skips
    open strings
    bass note 
    doubling. 
        minimum --> what can I add
        position at position --> every ct in that position
    whole neck view with just every way at once. up to like 12 or 15 frets or something
    drop down to view notes names or scale degree view w any given root

visual
    position markers. could be customizable
    custom color
    vertical diagrams --> better for showing a lot at once
    enharmonic splits box in half. choose one
    show notes - and if root selected - also show intervals 



    









DB 

user table with profile details

saved diagrams with user associated

preferences in user table? or in own table w user id
access type



CREATE TABLE users (
    id SERIAL PRIMARY KEY,                
    
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,   
    full_name VARCHAR(100),               
    password_hash VARCHAR(255) NOT NULL,  --hash!

    profile_picture_url TEXT,   --default?           
    created_at TIMESTAMP DEFAULT NOW(),   
    updated_at TIMESTAMP DEFAULT NOW(),  
	
    membership VARCHAR(50) NOT NULL
);

users
    id
    username
    email
    first_name
    last_name
    password
    picture
    created_at
    updated_at


preferences 
    user_id
    doubling
    useopenstrings
    color 
    enharmonics
    position markings?


tunings
	user id 
	tuning

chords 
    user_id
    tuning
    position
    chord



CREATE TABLE testusers2 (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE,
    email VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    password VARCHAR(255) NOT NULL,
    picture TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


INSERT INTO testusers (username, email, first_name, last_name, password)
VALUES ('testuname', 'test@gmail.com', 'rn', 'mich', 'poop1234');

INSERT INTO testusers (username, email, first_name, last_name, password)
VALUES ('testun2', 'test2@gmail.com', 'rn2', 'm2ich', 'po2op1234_2');














catch (err) {
      if (err.code === 'ER_DUP_ENTRY') {
        let message = err.sqlMessage
        

        if (message.includes('email')) { 
            console.log("dema - Email duplication detected");
            const response = {
                duplicate: 'email'
            };
            console.log("Response being sent for email:", response);
            res.json(response); // Send the constructed response object
        }
        else if (message.includes('username')) { 
            console.log("dusenm - Username duplication detected");
            const response = {
                duplicate: 'username'
            };
            console.log("Response being sent for username:", response);
            res.json(response); // Send the constructed response object
        } else {
            // Debugging: Handle unexpected cases
            console.log("Neither email nor username found in the error message.");
            res.json({ error: 'Unexpected error structure' });
        }
        
        
      } else {
        res.json({error: "server error"});
      }
    } 