[{"C:\\Users\\17082\\Documents\\Ryan Michaud\\GitHub\\TabV4\\src\\index.js":"1","C:\\Users\\17082\\Documents\\Ryan Michaud\\GitHub\\TabV4\\src\\App.js":"2","C:\\Users\\17082\\Documents\\Ryan Michaud\\GitHub\\TabV4\\src\\reportWebVitals.js":"3","C:\\Users\\17082\\Documents\\Ryan Michaud\\GitHub\\TabV4\\src\\main.js":"4"},{"size":540,"mtime":1689489868588,"results":"5","hashOfConfig":"6"},{"size":2009,"mtime":1689604407673,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1688574565362,"results":"8","hashOfConfig":"6"},{"size":4710,"mtime":1689604599698,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ub30rh",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\17082\\Documents\\Ryan Michaud\\GitHub\\TabV4\\src\\index.js",[],[],"C:\\Users\\17082\\Documents\\Ryan Michaud\\GitHub\\TabV4\\src\\App.js",[],[],"C:\\Users\\17082\\Documents\\Ryan Michaud\\GitHub\\TabV4\\src\\reportWebVitals.js",[],[],"C:\\Users\\17082\\Documents\\Ryan Michaud\\GitHub\\TabV4\\src\\main.js",["23","24","25"],[],"\r\n\r\nfunction getNoteNum(noteName){\r\n    let letterName = noteName.substring(0,noteName.length-1);\r\n    let octave = noteName.substring(noteName.length-1,noteName.length);\r\n    let num = nameMap.get(letterName);\r\n    num += (parseInt(octave)+1)*12;\r\n    return num\r\n}\r\nfunction getNoteNumNoOctave(noteName){\r\n    let letterName = noteName.substring(0,noteName.length-1);\r\n    let num = nameMap.get(letterName);\r\n    return num\r\n}\r\n\r\nfunction getNoteName(noteNum){\r\n    let letterNoteNum = noteNum%12;\r\n    let letterName = names[letterNoteNum];\r\n    let octave = Math.floor(noteNum/12) -1;\r\n    return letterName.concat(octave.toString());\r\n}\r\nfunction getNoteNameNoOctave(noteNum){\r\n    let letterNoteNum = noteNum%12;\r\n    let letterName = names[letterNoteNum];\r\n    return letterName;\r\n}\r\n\r\n\r\nconst names = [\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"];\r\nlet nameMap = new Map();\r\nfor(let i=0;i<12;i++){\r\n    nameMap.set(names[i],i);\r\n}\r\n\r\nclass MusicString{\r\n    constructor (open,frets){\r\n        this.open = open;\r\n        this.openNoOctave = open.substring(0,open.length-1);\r\n        this.tab = open.concat(\"    \");\r\n        this.openIsChordTone=false;\r\n        this.stringMap = new Map();\r\n        if(frets===undefined){\r\n            this.frets=12;\r\n        }else{\r\n            this.frets = frets;\r\n        }\r\n    \r\n        this.buildMap();\r\n    }\r\n\r\n\r\n    buildMap(){\r\n        let current = getNoteNumNoOctave(this.open);\r\n        for(let i=0;i<this.frets;i++){\r\n            this.stringMap[i] = names[current];\r\n            current+=1;\r\n            if (current === 12){\r\n                current=0;\r\n            }\r\n        }\r\n    } \r\n\r\n\r\n\r\n    printTab(){\r\n        console.log(this.tab);\r\n        this.tab = this.open+\"    \";\r\n    }\r\n    clearTab(){\r\n        this.tab = this.open+\"    \";\r\n    }\r\n    add(input){\r\n        this.tab=this.tab.concat(input);\r\n    }\r\n    addOpen(input){\r\n        if(this.open.length<2){\r\n            this.tab=this.open+\"  \"+input+\"  \";\r\n        }\r\n        else{\r\n            this.tab=this.open+\" \"+input+\"  \";\r\n        }\r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\nfunction generate(openStrings,chordTones){\r\n\r\n\r\n    let musicStrings = []\r\n\r\n    for(let i=openStrings.length-1; i>=0; i--){\r\n        let s = new MusicString(openStrings[i]);\r\n        musicStrings = musicStrings.concat(s);\r\n    }\r\n    \r\n    \r\n    \r\n    let checklist = chordTones.slice();\r\n    \r\n    \r\n    for(let stringNum=0;stringNum<musicStrings.length;stringNum++){ //set if any open strings are cts\r\n        let currentString = musicStrings[stringNum];\r\n        if(chordTones.includes(currentString.openNoOctave)){\r\n            currentString.openIsChordTone = true;\r\n        }\r\n    }\r\n\r\n\r\n    const stretch = 4;\r\n\r\n    let solutions=[]\r\n    \r\n\r\n    for(let position=0;position<12;position++){  //for each position\r\n        checklist = chordTones.slice()\r\n        let solution = [position];\r\n        for (let i=0; i<musicStrings.length;i++){\r\n            solution.push([])\r\n        }\r\n        \r\n        \r\n        for(let stringNum=0;stringNum<musicStrings.length;stringNum++){      //for each string\r\n\r\n            \r\n            let currentString = musicStrings[stringNum];\r\n           \r\n            if(currentString.openIsChordTone){                      //check if open is ct\r\n                //solution[stringNum+1].push(0);   \r\n                //bug here I think                 //add open to solution\r\n                //checklist.splice(checklist.indexOf(currentString.openNoOctave)); //update we have it covered - remove from checklist\r\n            }\r\n    \r\n            for(let i=position;i<position+stretch;i++){             //for each fret in the position add it if were looking for it\r\n                let note = currentString.stringMap[i];\r\n                if(chordTones.includes(note) ){\r\n                    //add to solution and remove from checklist\r\n                    solution[stringNum+1].push(note);\r\n                    if(checklist.indexOf(note) !== -1){\r\n                        checklist.splice(checklist.indexOf(note),1);\r\n                    }\r\n                    \r\n                    //console.log(position,'found ', note, ' on ', stringNum, checklist);\r\n                }\r\n                else{\r\n                    solution[stringNum+1].push(\" \");\r\n                }\r\n    \r\n            }  \r\n    \r\n        }\r\n        if(checklist.length === 0){                     //complete solution\r\n            //save solution sand mark position found and add to the list os solutions\r\n            solutions.push(solution)\r\n        }else{\r\n            //clear solution and don't add to the list\r\n        }\r\n     \r\n    }\r\n\r\n    console.log(solutions);\r\n    return(solutions);\r\n} \r\n\r\n\r\nexport {generate};",{"ruleId":"26","severity":1,"message":"27","line":3,"column":10,"nodeType":"28","messageId":"29","endLine":3,"endColumn":20},{"ruleId":"26","severity":1,"message":"30","line":16,"column":10,"nodeType":"28","messageId":"29","endLine":16,"endColumn":21},{"ruleId":"26","severity":1,"message":"31","line":22,"column":10,"nodeType":"28","messageId":"29","endLine":22,"endColumn":29},"no-unused-vars","'getNoteNum' is defined but never used.","Identifier","unusedVar","'getNoteName' is defined but never used.","'getNoteNameNoOctave' is defined but never used."]